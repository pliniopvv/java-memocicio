/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.memocicio.view;

import br.com.memocicio.db.Card;
import br.com.memocicio.db.Conjunto;
import br.com.memocicio.db.DBFactory;
import br.com.memocicio.db.Revisao;
import br.com.memocicio.ram.ConfigMemory;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author GanGss
 */
public class MemoView extends javax.swing.JFrame {

    /**
     * Creates new form MemoVieww
     */
    public MemoView() {
        initComponents();
        buildCategorias();
        resetCombobox();
        selectedConjunto = listaConjuntos.get(ConfigMemory.getInstance().get("selectedCategoria"));
        if (selectedConjunto != null) {
            cmbbox_categorias.getModel().setSelectedItem(selectedConjunto.getNome());
        }
        organizarDeck();
        nextCard();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        btn_bom = new javax.swing.JButton();
        btn_facil = new javax.swing.JButton();
        btn_dificil = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        cmbbox_categorias = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        front_txt = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        back_txt = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbl_prox_rev = new javax.swing.JLabel();
        lbl_id = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel1FocusGained(evt);
            }
        });

        jButton6.setText("Resposta");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        btn_bom.setBackground(new java.awt.Color(0, 0, 204));
        btn_bom.setText("Bom");
        btn_bom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_bomActionPerformed(evt);
            }
        });

        btn_facil.setBackground(new java.awt.Color(0, 153, 0));
        btn_facil.setText("Fácil");
        btn_facil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_facilActionPerformed(evt);
            }
        });

        btn_dificil.setBackground(new java.awt.Color(255, 0, 0));
        btn_dificil.setText("Difícil");
        btn_dificil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_dificilActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_dificil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_bom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_facil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_dificil, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(btn_bom, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(btn_facil, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addContainerGap())
        );

        cmbbox_categorias.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbbox_categoriasItemStateChanged(evt);
            }
        });
        cmbbox_categorias.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbbox_categoriasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cmbbox_categoriasFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbbox_categorias, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbbox_categorias, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                .addContainerGap())
        );

        front_txt.setEditable(false);
        front_txt.setColumns(20);
        front_txt.setLineWrap(true);
        front_txt.setRows(5);
        front_txt.setWrapStyleWord(true);
        jScrollPane1.setViewportView(front_txt);

        back_txt.setEditable(false);
        back_txt.setColumns(20);
        back_txt.setLineWrap(true);
        back_txt.setRows(5);
        back_txt.setWrapStyleWord(true);
        jScrollPane2.setViewportView(back_txt);

        jLabel1.setText("ID:");

        jLabel2.setText("Próxima Revisão:");

        lbl_prox_rev.setText("...");

        lbl_id.setText("...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_id)
                        .addGap(122, 122, 122)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_prox_rev)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(lbl_prox_rev)
                    .addComponent(lbl_id))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("Deck");

        jMenuItem1.setText("Adicionar/Editar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Reorganizar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Reclassificar Card");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 744, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(9, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(9, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 689, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_facilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_facilActionPerformed
        Facil();
    }//GEN-LAST:event_btn_facilActionPerformed

    private void btn_bomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_bomActionPerformed
        Bom();
    }//GEN-LAST:event_btn_bomActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        showBack();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jPanel1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel1FocusGained
        resetCombobox();
    }//GEN-LAST:event_jPanel1FocusGained

    private void btn_dificilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_dificilActionPerformed
        Dificil();
    }//GEN-LAST:event_btn_dificilActionPerformed

    private void cmbbox_categoriasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbbox_categoriasFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbbox_categoriasFocusLost

    private void cmbbox_categoriasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbbox_categoriasFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbbox_categoriasFocusGained

    private void cmbbox_categoriasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbbox_categoriasItemStateChanged
        selectedConjunto = listaConjuntos.get((String) cmbbox_categorias.getSelectedItem());
        reloadDeck();
    }//GEN-LAST:event_cmbbox_categoriasItemStateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        new CardsFactoryView().setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        organizarDeck();
        nextCard();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        ChangeCards cc = new ChangeCards();
        cc.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MemoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MemoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MemoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MemoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>F

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MemoView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea back_txt;
    private javax.swing.JButton btn_bom;
    private javax.swing.JButton btn_dificil;
    private javax.swing.JButton btn_facil;
    private javax.swing.JComboBox<String> cmbbox_categorias;
    private javax.swing.JTextArea front_txt;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_id;
    private javax.swing.JLabel lbl_prox_rev;
    // End of variables declaration//GEN-END:variables
    private Conjunto selectedConjunto;
    private Card selectedCard;
    private HashMap<String, Conjunto> listaConjuntos = new HashMap<String, Conjunto>();

    private void buildCategorias() {
        List<Conjunto> lista = DBFactory.getConjuntoController().findConjuntoEntities();
        listaConjuntos.clear();
        lista.forEach(_c -> {
            listaConjuntos.put(_c.getNome(), _c);
        });
    }

    private void resetCombobox() {
        List<Conjunto> listaC = DBFactory.getConjuntoController().findConjuntoEntities();
//        cmbbox_categorias.setRenderer(new CellColor());

        if (listaC.size() == 0) {
            return;
        }

        buildCategorias();

        String[] categorias = listaConjuntos.keySet().toArray(new String[listaConjuntos.size()]);
        cmbbox_categorias.setModel(new DefaultComboBoxModel(categorias));
        if (selectedConjunto == null) {
            selectedConjunto = listaConjuntos.get(categorias[0]);
        } else {
            cmbbox_categorias.getModel().setSelectedItem(selectedConjunto.getNome());
        }
    }

    private void nextCard() {
        if (selectedConjunto == null) {
            selectFirstCardOfConjunto();
        }

        if (selectedCard != null) {
            deckExibido.remove(selectedCard);
        }

        if (deckExibido.size() > 0) {
            selectedCard = deckExibido.get(0);
            front_txt.setText(selectedCard.getFrente());
            lbl_id.setText(String.valueOf(selectedCard.getId()));
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/YYYY hh:mm:ss");
            lbl_prox_rev.setText(sdf.format(getRevisao(selectedCard).getProximaRevisao()));
            back_txt.setText("...");
            changeButtonNames();
        } else {
            front_txt.setText("Sem cartões no deck.");
            back_txt.setText("...");
            lbl_id.setText("...");
            lbl_prox_rev.setText("...");
            selectedCard = null;
            resetButtonNames();
            return;
        }

//        // se não tem nenhuma carta no conjunto:
//        if (selectedConjunto == null) {
//            front_txt.setText("Sem cartões no deck.");
//            back_txt.setText("...");
//            selectedCard = null;
//            resetButtonNames();
//            return;
//        }
    }

    private void showBack() {
        back_txt.setText(selectedCard.getTras());
    }

    private void reloadDeck() {
        organizarDeck();
        nextCard();
    }

    private void Facil() {
        if (selectedCard == null) {
            return;
        }

//        Revisao r = getRevisao(selectedCard);
//        long nextRev = CalcNextRev(r.getUpdatedAt(), r.getProximaRevisao()).getTime();
//        r.setProximaRevisao(new Date(nextRev));
//        nextRev = CalcNextRev(r.getUpdatedAt(), r.getProximaRevisao()).getTime();
//        r.setProximaRevisao(new Date(nextRev));
        setNextRev(2, selectedCard);
        Revisao r = getRevisao(selectedCard);

        try {
            DBFactory.getRevisaoController().edit(r);
        } catch (Exception e) {
            e.printStackTrace();
        }
        nextCard();
    }

    private void Bom() {
        if (selectedCard == null) {
            return;
        }

//        Revisao r = getRevisao(selectedCard);
//        long nextRev = CalcNextRev(r.getUpdatedAt(), r.getProximaRevisao()).getTime();
//        r.setProximaRevisao(new Date(nextRev));
        setNextRev(1, selectedCard);
        Revisao r = getRevisao(selectedCard);

        try {
            DBFactory.getRevisaoController().edit(r);
        } catch (Exception e) {
            e.printStackTrace();
        }
        nextCard();
    }

    private void Dificil() {
        if (selectedCard == null) {
            return;
        }

//        Revisao r = getRevisao(selectedCard);
//        long nextRev = CalcPrevRev(r.getUpdatedAt(), r.getProximaRevisao()).getTime();
//        r.setProximaRevisao(new Date(nextRev));
        setNextRev(0, selectedCard);
        Revisao r = getRevisao(selectedCard);

        try {
            DBFactory.getRevisaoController().edit(r);
        } catch (Exception e) {
            e.printStackTrace();
        }
        nextCard();
    }

    private void selectFirstCardOfConjunto() {
        selectedConjunto = listaConjuntos.get(cmbbox_categorias.getModel().getSelectedItem());
    }

    private ArrayList<Card> deckExibido = new ArrayList<>();

    private void organizarDeck() {
        if (selectedConjunto == null) {
            selectFirstCardOfConjunto();
        }

        deckExibido.clear();
        List<Revisao> listaR = DBFactory.getRevisaoController().findRevisaoEntities();
        List<Card> listaC = DBFactory.getCardsController().findCardEntities();
        listaC.removeAll(listaR.stream().map(r -> r.getCard()).collect(Collectors.toList()));

        // CARDS APENAS NO DECK SELECIONADO
        listaC = listaC.stream()
                .filter(c
                        -> selectedConjunto.getId() == c.getConjuntoFk().getId()
                )
                .collect(Collectors.toList());

        // ORGANIZANDO OS CARDS QUE POSSUEM REGISTRO DE REVISÃO
        Calendar agora = Calendar.getInstance();
        List<Card> listaCR = listaR.stream()
                .filter(r -> {
                    Calendar c = Calendar.getInstance();
                    c.setTime(r.getProximaRevisao());
                    return agora.after(c);
                })
                .filter(r
                        -> selectedConjunto.getId() == r.getCard().getConjuntoFk().getId()
                )
                .sorted(Comparator.comparing(Revisao::getProximaRevisao))
                .map(r -> r.getCard())
                .collect(Collectors.toList());

        deckExibido.addAll(listaC);
        deckExibido.addAll(listaCR);
    }

    private Revisao getRevisao(Card selectedCard) {
        Revisao r;
//        selectedCard = DBFactory.getCardsController().findCard(selectedCard.getId());
        if (selectedCard.getRevisaoList().size() == 0) {
            r = new Revisao();
            r.setCard(selectedCard);
            r.setClassificacao(1);
            Calendar c = Calendar.getInstance();
            c.add(Calendar.MINUTE, 10);
            r.setProximaRevisao(c.getTime());
            r.setUpdatedAt(new Date());
            DBFactory.getRevisaoController().create(r);
            selectedCard.getRevisaoList().add(r);
        } else {
            r = selectedCard.getRevisaoList().get(0);
            r.setUpdatedAt(new Date());
        }
        return r;
    }

    private Date setNextRev(int clas, Card card) {
        long T10_MIN = 1000 * 60 * 10;
        long T1_DAY = 1000 * 60 * 60 * 24;
        long T4_DAYS = T1_DAY * 4;

        Revisao r = getRevisao(card);
//        int clas = r.getClassificacao();
        long[] dia = {T10_MIN, T1_DAY, T4_DAYS};

//        clas++;
//        if (clas > 2) {
//            clas = 2;
//        };
        r.setClassificacao(clas);
        Date d = new Date();
        d.setTime(d.getTime() + dia[clas]);
        r.setProximaRevisao(d);
        return d;
    }

    private Date CalcNextRev(Date updateAt, Date nextRev) {
        long T10_MIN = 1000 * 60 * 10;
        long T1_DAY = 1000 * 60 * 60 * 24;
        long T4_DAYS = T1_DAY * 4;

        if (nextRev == null) {
            Date r = new Date();
            r.setTime(r.getTime() + T10_MIN);
            return r;
        }

        long diff = (nextRev.getTime() - updateAt.getTime());

        if (diff <= T10_MIN) {
            Date r = new Date();
            r.setTime(r.getTime() + T1_DAY);
            return r;
        } else if ((T10_MIN < diff) && (diff <= T4_DAYS)) {
            Date r = new Date();
            r.setTime(r.getTime() + T4_DAYS);
            return r;
        } else if (diff > T4_DAYS) {
            Date r = new Date();
            long rd = (long) (diff * 1.5);
            r.setTime(r.getTime() + rd);
            return r;
        } else {
            Date r = new Date();
            r.setTime(r.getTime() + T10_MIN);
            return r;
        }
    }

    private Date CalcPrevRev(Date updateAt, Date nextRev) {
        long T10_MIN = 1000 * 60 * 10;
        long T1_DAY = 1000 * 60 * 60 * 24;
        long T4_DAYS = T1_DAY * 4;

        if (nextRev == null) {
            Date r = new Date();
            r.setTime(r.getTime() + T10_MIN);
            return r;
        }

        long diff = (nextRev.getTime() - updateAt.getTime());

        if (diff > T4_DAYS) {
            Date r = new Date();
            long rd = (long) (diff * 0.5);
            if (rd < T4_DAYS) {
                rd = T4_DAYS;
            }
            r.setTime(r.getTime() + rd);
            return r;
        } else if ((T1_DAY < diff) && (diff <= T4_DAYS)) {
            Date r = new Date();
            r.setTime(r.getTime() + T1_DAY);
            return r;
        } else if ((T10_MIN < diff) && (diff <= T1_DAY)) {
            Date r = new Date();
            r.setTime(r.getTime() + T10_MIN);
            return r;
        } else {
            Date r = new Date();
            r.setTime(r.getTime() + T10_MIN);
            return r;
        }
    }

    private void changeButtonNames() {
//        Revisao r = getRevisao(selectedCard);
//        Date dfacil = CalcNextRev(r.getUpdatedAt(), r.getProximaRevisao());
//        dfacil = CalcNextRev(r.getUpdatedAt(), dfacil);
//        Date dbom = CalcNextRev(r.getUpdatedAt(), r.getProximaRevisao());
//        Date ddificil = CalcPrevRev(r.getUpdatedAt(), r.getProximaRevisao());

        Date ddificil = setNextRev(0, selectedCard);
        Date dbom = setNextRev(1, selectedCard);
        Date dfacil = setNextRev(2, selectedCard);

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");

        btn_facil.setText("Facil \n" + sdf.format(dfacil));
        btn_bom.setText("Bom \n" + sdf.format(dbom));
        btn_dificil.setText("Dificil \n" + sdf.format(ddificil));
    }

    private void resetButtonNames() {
        btn_facil.setText("Facil");
        btn_bom.setText("Bom");
        btn_dificil.setText("Dificil");
    }

//    private class CellColor extends JLabel implements ListCellRenderer<String> {
//
//        @Override
//        public Component getListCellRendererComponent(JList<? extends String> list, String value, int index, boolean isSelected, boolean cellHasFocus) {
//            Conjunto c = listaConjuntos.get(value.toString());
//            Date hoje = new Date();
//            System.out.println(value.toString() + "  " + c.getCardList().size());
//            boolean res = false;
//            for (Card card : c.getCardList()) {
//                if (getRevisao(card).getProximaRevisao().before(hoje)) {
//                    res = true;
//                    break;
//                }
//            }
//
//            if (res) {
//                setBackground(Color.RED);
//            } else {
//                setBackground(Color.GREEN);
//            }
//            setText(value.toString());
//            return this;
//        }
//
//    }
}
